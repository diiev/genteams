from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types 
from database import db_show_players
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
def main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="add_player")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤", callback_data="players")],
        [InlineKeyboardButton(text="üë• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", callback_data="generate_teams")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="edit_player")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="delete_player")],
    ])
    return keyboard



def back_button(callback):
    return [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"{callback}")]


def cancel_button():
    return [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]


def team_size_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="4x4", callback_data="team_4x4")],
        [InlineKeyboardButton(text="5x5", callback_data="team_5x5")],
        [InlineKeyboardButton(text="6x6", callback_data="team_6x6")],
        [InlineKeyboardButton(text="8x8", callback_data="team_8x8")]
    ])
    return keyboard



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥
def balance_teams(players, team_size):
    players.sort(key=lambda x: x[1], reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–∏–ª–µ
    team1, team2 = [], []
    total1, total2 = 0, 0
    
    for player in players:
        if len(team1) < team_size and (total1 <= total2 or len(team2) >= team_size):
            team1.append(player)
            total1 += player[1]
        else:
            team2.append(player)
            total2 += player[1]
    
    return team1, team2



def generate_team_options_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="generate_balanced")
    builder.button(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–µ", callback_data="generate_random")
    builder.button(text="‚Ü©Ô∏è –ì–æ—Ç–æ–≤–æ(–≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é)", callback_data="menu")
    builder.adjust(1)
    return builder.as_markup()


def _build_pagination_kb(current_page: int, total_pages: int) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    kb = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 1:
        nav_buttons.append(
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"players:{current_page - 1}"
            )
        )
    
    if current_page < total_pages:
        nav_buttons.append(
            types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"players:{current_page + 1}"
            )
        )
    
    if nav_buttons:
        kb.append(nav_buttons)
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        kb.append([
            types.InlineKeyboardButton(
                text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}",
                callback_data="noop"  # –ó–∞–≥–ª—É—à–∫–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    kb.append([
        types.InlineKeyboardButton(
            text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="menu"
        )
    ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=kb)


def get_players_page(players, page=0, PAGE_SIZE = 6):
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    return players[start:end]

def generate_pagination_keyboard(players, page=0,   PAGE_SIZE = 6, callback = "", callback_page = ""):
    total_pages = (len(players) - 1) // PAGE_SIZE + 1
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    for p in get_players_page(players, page):
        builder.button(text=f"{p[1]} - {p[2]}", callback_data=f"{callback}_{p[1]}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{callback_page}_{page-1}")
    if page < total_pages - 1:
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"{callback_page}_{page+1}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")

    builder.adjust(1)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    return builder.as_markup()



async def player_pagination(callback_query: types.CallbackQuery, callback):
    page = int(callback_query.data.split("_")[2])
    players = db_show_players(callback_query)
    
    await callback_query.message.edit_reply_markup(reply_markup=generate_pagination_keyboard(players = players, page = page, callback=f"{callback}"))