from aiogram import types 
from aiogram import  Dispatcher
from utils.util import team_size_keyboard, generate_pagination_keyboard, generate_team_options_keyboard, main_menu_keyboard
from database import db_show_players, db_set_plays_today, db_get_players_today, db_reset_plays_today
from aiogram.fsm.state import State, StatesGroup 
from aiogram.fsm.context import FSMContext

dp = Dispatcher ()

class TeamSelection(StatesGroup):
    selecting_players = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤


@dp.callback_query(lambda c: c.data == "genteams")
async def genteams (callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–≥—Ä—ã:", reply_markup=team_size_keyboard())



@dp.callback_query(lambda c: c.data.startwidth("team_"))
async def handle_team_size(callback_query: types.CallbackQuery,  state: FSMContext):
    team_size_str = callback_query.data.split("_")[1]  # "5x5", "6x6" –∏ —Ç.–¥.
    team_size = int(team_size_str.split("x")[0])
    await state.set_state(TeamSelection.selecting_players)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
    team_size=team_size_str,
    selected_players=[],  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
    current_page = 0
    )
    
    players = db_show_players(callback_query)
    db_reset_plays_today(callback_query.from_user.id)
    if len(players) < team_size * 2:
        await callback_query.message.answer(f"–ù–µ–¥–æ—Å—Ç–∞–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤, –¥–ª—è –∏–≥—Ä—ã –Ω–∞ {team_size_str}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä –∏–≥—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=team_size_keyboard())
    else:
        await callback_query.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏–≥—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è (–Ω—É–∂–Ω–æ {team_size * 2} —á–µ–ª.): ', 
        reply_markup=generate_pagination_keyboard(players=players, 
        page=0, 
        callback=f"select_player_{team_size}", 
        callback_page="s_edit_page"))

   
    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ


@dp.callback_query(lambda c: c.data.startswith("select_player_"))
async def select_players_today(
    callback_query: types.CallbackQuery,
    state: FSMContext
):
    data = await state.get_data()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ
    if not data:
        await callback_query.message.answer("‚ùå –°–µ—Å—Å–∏—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    data.setdefault("selected_players", [])
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    try:
        _, _, team_size_str, player_name = callback_query.data.split("_")
        team_size = int(team_size_str.split("x")[0])
    except (ValueError, IndexError):
        await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    max_players = team_size * 2

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞
    if player_name in data["selected_players"]:
        data['selected_players'].remove(player_name)
        await callback_query.answer("‚ùå –ò–≥—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω!")
        remaining = max_players - len(data["selected_players"])
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–≥—Ä–æ–∫–∞
        try:
            if "selection_message_id" in data:
                await callback_query.bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=data["selection_message_id"],
                    text=f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {len(data['selected_players'])}/{max_players}\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
                )
            else:
                msg = await callback_query.message.answer(
                    f"–í—ã–±—Ä–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(data['selected_players'])}/{max_players}\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
                )
                await state.update_data(selection_message_id=msg.message_id)
        except Exception as e:
            msg = await callback_query.message.answer(
                f"–í—ã–±—Ä–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(data['selected_players'])}/{max_players}\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
            )
            await state.update_data(selection_message_id=msg.message_id)
        
        await state.update_data(selected_players=data["selected_players"])
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if len(data["selected_players"]) >= max_players:
        await callback_query.answer("üö´ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data["selected_players"].append(player_name)
    await state.update_data(selected_players=data["selected_players"])

    remaining = max_players - len(data["selected_players"])

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if "selection_message_id" in data:
            await callback_query.bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=data["selection_message_id"],
                text=f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {len(data['selected_players'])}/{max_players}\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
            )
        else:
            msg = await callback_query.message.answer(
                f"–í—ã–±—Ä–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(data['selected_players'])}/{max_players}\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
            )
            await state.update_data(selection_message_id=msg.message_id)
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        msg = await callback_query.message.answer(
            f"–í—ã–±—Ä–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(data['selected_players'])}/{max_players}\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
        )
        await state.update_data(selection_message_id=msg.message_id)

    await callback_query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫: {player_name}")
    db_set_plays_today(player_name, callback_query.from_user.id)

    # –ï—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã
    if remaining == 0:
        await callback_query.message.answer(
            "–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã! –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã...",
            reply_markup=generate_team_options_keyboard()  # –í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        )




@dp.callback_query(lambda c: c.data.startswith("s_edit_page_"))
async def select_player_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    team_size_str = data["team_size"]  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    page = int(callback_query.data.split("_")[3])
    await state.update_data(current_page=page)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    players = db_show_players(callback_query)
    await callback_query.message.edit_reply_markup(
        reply_markup=generate_pagination_keyboard(
            players=players,
            page=page,
            callback=f"select_player_{team_size_str}", # –ü–µ—Ä–µ–¥–∞–µ–º team_size_str
            callback_page="s_edit_page"
        )
    )
    await callback_query.answer()




import random
from typing import List, Tuple
def get_player_stats(player: Tuple) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞"""
    return {
        'speed': player[3],
        'stamina': player[4],
        'shot_power': player[5],
        'shot_accuracy': player[6],
        'pass_accuracy': player[7],
        'teamwork': player[8],
        'defense': player[9],
        'dribbling': player[10],
        'enterball': player[13]
    } 

def calculate_total_rating(player: Tuple) -> int:
    # """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞"""
    # stats = get_player_stats(player)
    # print(stats)
    # print(sum(stats.values()))
    # return sum(stats.values())
    return player[-2]


def balance_teams(players: List[Tuple], team_size: int, max_attempts: int = 100) -> Tuple[List, List]:
    """
    –ë–∞–ª–∞–Ω—Å–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–±—â–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö.
    
    Args:
        players: [(id, user_id, name, speed, stamina, ...), ...]
        team_size: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
        max_attempts: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö –∫–æ–º–∞–Ω–¥ (team1, team2)
    """
    if len(players) < 2 * team_size:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    sorted_players = sorted(players, key=calculate_total_rating, reverse=True)
    
    best_team1 = []
    best_team2 = []
    min_diff = float('inf')
    
    for attempt in range(max_attempts):
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
        if attempt > 0:
            random.shuffle(sorted_players)
        
        team1 = []
        team2 = []
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∑–º–µ–π–∫–æ–π
        for i, player in enumerate(sorted_players[:2*team_size]):
            if i % 2 == 0:
                team1.append(player)
            else:
                team2.append(player)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥
        rating1 = sum(calculate_total_rating(p) for p in team1[:team_size]) / len(team1)
        rating2 = sum(calculate_total_rating(p) for p in team2[:team_size]) / len(team2)
        diff = abs(rating1 - rating2)
        
        # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É
        if diff <= 1.5:
            return team1[:team_size], team2[:team_size]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        if diff < min_diff:
            min_diff = diff
            best_team1, best_team2 = team1[:team_size], team2[:team_size]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
    return best_team1, best_team2


def random_teams(players: List[Tuple], team_size: int) -> Tuple[List, List]:
    """–°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤"""
    shuffled = random.sample(players, len(players))
    return shuffled[:team_size], shuffled[team_size:team_size*2]

def generate_teams_response(team1: List[Tuple], team2: List[Tuple]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    def calculate_team_stats(team):
        stats = {
            'total': sum(calculate_total_rating(p) for p in team) / len(team),
            'names': [p[2] for p in team]  # –ò–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
        }
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        stats.update({k: sum(get_player_stats(p)[k] for p in team) / len(team)
                    for k in get_player_stats(team[0])})
        return stats
    
    stats1 = calculate_team_stats(team1)
    stats2 = calculate_team_stats(team2)
    
    response = (
        f"‚öΩ <b>–ö–æ–º–∞–Ω–¥–∞ 1</b> (–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats1['total']:.1f})\n"
        f"üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: {stats1['speed']:.2f} | üèãÔ∏è‚Äç‚ôÇÔ∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {stats1['stamina']:.1f}\n"
        f"üí™ –°–∏–ª–∞ —É–¥–∞—Ä–∞: {stats1['shot_power']:.2f} | üéØ –¢–æ—á–Ω–æ—Å—Ç—å —É–¥–∞—Ä–∞: {stats1['shot_accuracy']:.1f}\n"
        f"üì° –¢–æ—á–Ω–æ—Å—Ç—å –ø–∞—Å–æ–≤: {stats1['pass_accuracy']:.1f} | ü§ù –ö–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞: {stats1['teamwork']:.1f}\n"
        f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {stats1['defense']:.1f} | üèÉ‚Äç‚ôÇÔ∏è –î—Ä–∏–±–ª–∏–Ω–≥: {stats1['dribbling']:.1f}\n"
        f"ü§æüèø‚Äç‚ôÇÔ∏è –ü—Ä–∏–Ω—è—Ç–∏–µ –º—è—á–∞: {stats1['enterball']:.1f}\n"
        "–°–æ—Å—Ç–∞–≤:\n" + "\n".join([f"‚Ä¢ {name}" for name in stats1['names']]) + "\n\n"
        
        f"‚öΩ <b>–ö–æ–º–∞–Ω–¥–∞ 2</b> (–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats2['total']:.1f})\n"
        f"üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: {stats2['speed']:.1f} | üèãÔ∏è‚Äç‚ôÇÔ∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {stats2['stamina']:.1f}\n"
        f"üí™ –°–∏–ª–∞ —É–¥–∞—Ä–∞: {stats2['shot_power']:.1f} | üéØ –¢–æ—á–Ω–æ—Å—Ç—å —É–¥–∞—Ä–∞: {stats2['shot_accuracy']:.1f}\n"
        f"üì° –¢–æ—á–Ω–æ—Å—Ç—å –ø–∞—Å–æ–≤: {stats2['pass_accuracy']:.1f} | ü§ù –ö–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞: {stats2['teamwork']:.1f}\n"
        f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {stats2['defense']:.1f} | üèÉ‚Äç‚ôÇÔ∏è –î—Ä–∏–±–ª–∏–Ω–≥: {stats2['dribbling']:.1f}\n"
        f"ü§æüèø‚Äç‚ôÇÔ∏è –ü—Ä–∏–Ω—è—Ç–∏–µ –º—è—á–∞: {stats2['enterball']:.1f}\n"
        "–°–æ—Å—Ç–∞–≤:\n" + "\n".join([f"‚Ä¢ {name}" for name in stats2['names']])
    )
    
    return response




@dp.callback_query(lambda c: c.data.startswith("generate_"))
async def handle_generation(callback_query: types.CallbackQuery):
    selected_players = db_get_players_today(callback_query.from_user.id)
    if callback_query.data == "generate_balanced":
        team1, team2 = balance_teams(selected_players, len(selected_players)//2)
    else:
        team1, team2 = random_teams(selected_players, len(selected_players)//2)
    
    await callback_query.message.answer(
        generate_teams_response(team1, team2),
        reply_markup=generate_team_options_keyboard()
    )